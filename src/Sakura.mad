import { EQ, GT, LT } from "Compare"
import Float from "Float"
import Fn from "Function"
import IO from "IO"
import List from "List"
import Math from "Math"
import Maybe from "Maybe"

import Random from "Random"



export type Suit
  = Pine
  | Plum
  | Cherry
  | Wisteria
  | Iris
  | Peony
  | Clover
  | Grass
  | Chrysanthemum
  | Maple
  | Willow
  | Foxglove

// Hikari = 20
// Tane = 5
// Tanzaku = 10
// Kasu = 0
export type Value = Hikari | Tane | Tanzaku | Kasu
export type Card = Card(Suit, Value)

// name -> cardsInHand
type Player = Player(String, List Card)


export NAMED = {
  stork: Card(Pine, Hikari),
  warbler: Card(Plum, Tane),
  sakura: Card(Cherry, Hikari),
  songbird: Card(Wisteria, Tane),
  bridge: Card(Iris, Tane),
  butterflies: Card(Peony, Tane),
  pig: Card(Clover, Tane),
  moon: Card(Grass, Hikari),
  birds: Card(Grass, Tanzaku),
  sake: Card(Chrysanthemum, Tane),
  deer: Card(Maple, Tane),
  police: Card(Willow, Kasu),
  rainman: Card(Willow, Tane),
  swallow: Card(Willow, Tane),
  chicken: Card(Foxglove, Hikari),
  foxglove: Card(Foxglove, Tanzaku),
}

export BANNERS = {
  pine: Card(Pine, Tanzaku),
  plum: Card(Plum, Tanzaku),
  cherry: Card(Cherry, Tanzaku),
  wisteria: Card(Wisteria, Tanzaku),
  iris: Card(Iris, Tanzaku),
  grass: Card(Grass, Tanzaku),
  peony: Card(Peony, Tanzaku),
  clover: Card(Clover, Tanzaku),
  chrysanthemum: Card(Chrysanthemum, Tanzaku),
  maple: Card(Maple, Tanzaku),
  willow: Card(Willow, Tanzaku),
}


DECK :: List Card
export DECK = [
  NAMED.stork,
  BANNERS.pine,
  Card(Pine, Kasu),
  Card(Pine, Kasu),
  NAMED.warbler,
  BANNERS.plum,
  Card(Plum, Kasu),
  Card(Plum, Kasu),
  NAMED.sakura,
  BANNERS.cherry,
  Card(Cherry, Kasu),
  Card(Cherry, Kasu),
  NAMED.songbird,
  BANNERS.wisteria,
  Card(Wisteria, Kasu),
  Card(Wisteria, Kasu),
  NAMED.bridge,
  BANNERS.iris,
  Card(Iris, Kasu),
  Card(Iris, Kasu),
  NAMED.butterflies,
  BANNERS.peony,
  Card(Peony, Kasu),
  Card(Peony, Kasu),
  NAMED.pig,
  BANNERS.clover,
  Card(Clover, Kasu),
  Card(Clover, Kasu),
  NAMED.moon,
  BANNERS.grass,
  Card(Grass, Kasu),
  Card(Grass, Kasu),
  NAMED.sake,
  BANNERS.chrysanthemum,
  Card(Chrysanthemum, Kasu),
  Card(Chrysanthemum, Kasu),
  NAMED.deer,
  BANNERS.maple,
  Card(Maple, Kasu),
  Card(Maple, Kasu),
  NAMED.rainman,
  NAMED.swallow,
  BANNERS.willow,
  NAMED.police,
  NAMED.chicken,
  NAMED.foxglove,
  Card(Foxglove, Kasu),
  Card(Foxglove, Kasu),
]

export alias Yaku = #[Card, Card, Card]

YAKUS :: List Yaku
export YAKUS = [
  #[NAMED.stork, NAMED.sakura, NAMED.warbler],
  #[NAMED.sakura, NAMED.moon, NAMED.sake],
  #[NAMED.butterflies, NAMED.sake, NAMED.deer],
  #[NAMED.pig, NAMED.birds, NAMED.deer],
  #[NAMED.songbird, NAMED.bridge, NAMED.pig],
  #[BANNERS.pine, BANNERS.plum, BANNERS.cherry],
  #[BANNERS.wisteria, BANNERS.iris, BANNERS.clover],
  #[BANNERS.peony, BANNERS.chrysanthemum, BANNERS.maple],
]

hasCard :: Card -> List Card -> Boolean
hasCard = (c, cs) => Fn.any(
  (k) => where(#[c, k]) {
    #[Card(a, a2), Card(b, b2)] =>
      a == b && a2 == b2
  },
  cs,
)


checkYaku :: Yaku -> List Card -> Boolean
checkYaku = (yaku, cards) => where(yaku) {
  #[a, b, c] =>
    Fn.all(hasCard($, cards), [a, b, c])
}

matchYakus :: List Card -> List Yaku
matchYakus = (cards) => List.filter(checkYaku($, cards), YAKUS)

hasAnyYaku :: List Card -> Boolean
hasAnyYaku = (cards) => Fn.any(checkYaku($, cards), YAKUS)

pointCardsOnly :: List Card -> List Card
pointCardsOnly = List.filter(
  where {
    Card(_, Kasu) =>
      false

    _ =>
      true
  },
)

toPointValue :: Value -> Integer
toPointValue = where {
  Hikari =>
    20

  Tanzaku =>
    10

  Tane =>
    5

  _ =>
    0
}

toOrdinalMonth :: Suit -> Integer
toOrdinalMonth = where {
  Pine =>
    0

  Plum =>
    1

  Cherry =>
    2

  Wisteria =>
    3

  Iris =>
    4

  Peony =>
    5

  Clover =>
    6

  Grass =>
    7

  Chrysanthemum =>
    8

  Maple =>
    9

  Willow =>
    10

  Foxglove =>
    11
}


sortCards :: List Card -> List Card
sortCards = List.sortBy(
  (a, b) => where(#[a, b]) {
    #[Card(s1, v1), Card(s2, v2)] =>
      do {
        x = toOrdinalMonth(s1)
        x2 = toPointValue(v1)
        y = toOrdinalMonth(s2)
        y2 = toPointValue(v1)
        return if (x == y) {
          x2 == y2 ? EQ : x2 < y2 ? GT : LT
        } else {
          x > y ? GT : LT
        }
      }
  },
)

numberOfCardsByNumberOfPlayers :: Integer -> #[Integer, Integer]
numberOfCardsByNumberOfPlayers = (i) => i == 2
  ? #[8, 8]
  : i == 3
    ? #[7, 6]
    : i == 4 ? #[5, 8] : i == 5 ? #[4, 8] : i == 6 ? #[3, 12] : i == 7 ? #[3, 6] : #[-1, -1]

playerAtIndex :: Integer -> List Player -> Player
playerAtIndex = (i, players) => pipe(
  List.nth(i),
  Maybe.fromMaybe(Player("Nobody", [])),
)(players)

playerName :: Player -> String
playerName = where {
  Player(name, _) =>
    name
}

getPlayerByName :: String -> List Player -> Maybe Player
getPlayerByName = (name, players) => List.find((p) => playerName(p) == name, players)

nameOfPlayerAtIndex :: List Player -> Integer -> String
nameOfPlayerAtIndex = (players, i) => pipe(
  playerAtIndex(i),
  playerName,
)(players)

cut :: Integer -> List a -> #[List a, List a]
cut = (a, xs) => #[List.slice(0, a, xs), List.slice(a, List.length(xs), xs)]

segment :: Integer -> List a -> List (List a)
segment = (l, xs) => {
  t = List.length(xs)
  perfect = t % l == 0
  whole = Float.toInteger(Math.floor(t / l))
  repeat = perfect ? whole : whole + 1
  return l < 1 ? [xs] : List.repeatWith((i) => List.slice(i * l, (i + 1) * l, xs), repeat)
}

alias DealtState = { pile :: List Card, players :: List Player, visible :: List Card }

deal :: String -> List Card -> List String -> DealtState
deal = (seed, allCards, playerNames) => {
  rand = Random.generateFromString(seed)
  shuffled = rand.shuffle(allCards)
  totalPlayers = List.length(playerNames)
  return if (totalPlayers < 2 || totalPlayers > 7) {
    { pile: [], players: [], visible: [] }
  } else {
    where(numberOfCardsByNumberOfPlayers(totalPlayers)) {
      #[perPlayer, faceUp] =>
        pipe(
          segment(perPlayer),
          cut(totalPlayers),
          where {
            #[dealt, rest] =>
              pipe(
                List.flatten,
                cut(faceUp),
                where {
                  #[upCards, pile] =>
                    (
                      {
                        players: pipe(
                          List.zip(playerNames),
                          map(where { #[n, c] => Player(n, sortCards(c)) }),
                        )(dealt),
                        visible: sortCards(upCards),
                        pile,
                      }
                    )
                },
              )(rest)
          },
        )(shuffled)
    }
  }
}

canMatchSuit :: List Card -> Card -> Boolean
canMatchSuit = (cs, c) => where(c) {
  Card(_, suit) =>
    Fn.any(where { Card(_, suit2) => suit == suit2 }, cs)
}
canMatch :: List Card -> Card -> Boolean
canMatch = (cs, c) => where(c) {
  // the lightning / police can match any card
  Card(Willow, Kasu) =>
    true

  Card(a, suit) =>
    Fn.any(where { Card(b, suit2) => suit == suit2 && a != b }, cs)
}
cardInList :: List Card -> Card -> Boolean
cardInList = (cs, c) => where(c) {
  Card(a, suit) =>
    Fn.any(where { Card(b, suit2) => suit == suit2 && a == b }, cs)
}

// assumes that the yaku is valid and sorted
pointsForYaku :: Yaku -> Integer
export pointsForYaku = where {
  #[_, Card(Cherry, Hikari), _] =>
    100

  #[Card(Cherry, Hikari), _, _] =>
    100

  _ =>
    50
}


matchableCards :: List Card -> Card -> List Card
matchableCards = (cs, c) => where(c) {
  Card(Willow, Kasu) =>
    cs

  Card(_, suit) =>
    List.filter(where { Card(_, suit2) => suit == suit2 }, cs)
}

playableCards :: List Card -> List Card -> List Card
playableCards = (deck, hand) => List.filter(canMatch(deck), hand)


// We're separating cards by in-hand + up already, so PlayState only applies to cards which have been played for points
type PlayState = Played(String) | Discarded
type PlayingCard = PlayingCard(PlayState, Card)

// active - whose turn is it?
// played - includes both trash + cards played for points
alias PlayableState = {
  active :: String,
  pile :: List Card,
  played :: List PlayingCard,
  players :: List Player,
  visible :: List Card,
}

initialize :: DealtState -> PlayableState
initialize = (state) => (
  {
    ...state,
    played: [],
    active: pipe(
      .players,
      List.nth(0),
      map(playerName),
      Maybe.fromMaybe("Nobody"),
    )(state),
  }
)

siftByOwner :: String -> PlayingCard -> Boolean
siftByOwner = (owner, card) => where(card) {
  PlayingCard(Played(other), _) =>
    owner == other

  _ =>
    false
}

siftByUnowned :: PlayingCard -> Boolean
siftByUnowned = where {
  PlayingCard(Discarded, _) =>
    true

  _ =>
    false
}

filterPlayedCards :: PlayState -> List PlayingCard -> List PlayingCard
filterPlayedCards = (pState, cards) => where(pState) {
  Played(by) =>
    List.filter(siftByOwner(by), cards)

  _ =>
    List.filter(siftByUnowned, cards)
}
rejectPlayedCards :: PlayState -> List PlayingCard -> List PlayingCard
rejectPlayedCards = (pState, cards) => where(pState) {
  Played(by) =>
    List.reject(siftByOwner(by), cards)

  _ =>
    List.reject(siftByUnowned, cards)
}

getPointCards :: List PlayingCard -> List PlayingCard
getPointCards = List.reject(siftByUnowned)


cardsFromPlayedCards :: List PlayingCard -> List Card
cardsFromPlayedCards = map(where { PlayingCard(_, c) => c })

getHand :: Player -> List Card
getHand = where {
  Player(_, cards) =>
    cards
}

naiveMove :: String -> PlayableState -> Maybe Card
naiveMove = (seed, state) => {
  rand = Random.generateFromString(seed)
  current = getPlayerByName(state.active, state.players)
  return pipe(
    chain(
      pipe(
        getHand,
        playableCards(state.visible),
        rand.pick,
      ),
    ),
  )(current)
}

// weightCard :: List PlayingCard , card-> Card -> Integer
weightCard = (player, playedCards, card) => {
  played = getPointCards(playedCards)
  currentPlayer = Played(playerName(player))
  myCards = filterPlayedCards(currentPlayer, played)
  notMyCards = rejectPlayedCards(currentPlayer, played)
  weigh = pipe(
    cardsFromPlayedCards,
    List.append(card),
    matchYakus,
  )
  return #[weigh(myCards), weigh(notMyCards)]
}

// bestMove :: List PlayingCard -> List Card -> List Card -> Card
bestMove = (player, playedCards, upCards, hand) => pipe(
  playableCards(upCards),
  sortCards,
  map(weightCard(player, playedCards)),
)(hand)

/*
turn :: PlayableState -> PlayableState
turn = (state) => {
  current = getPlayerByName(state.active, state.players)
}
*/


main = () => {
  seed = "flower-cards-v1"
  dealt = deal(seed, DECK, ["Brekk", "Clive"])
  // IO.pLog(dealt)
  state = initialize(dealt)
  IO.cTrace("Initial Hands!", state.players)
  naiveMove(seed, state) |> IO.cTrace("yooo")
  playedCards = [
    PlayingCard(Played("Brekk"), Card(Cherry, Hikari)),
    PlayingCard(Played("Clive"), Card(Iris, Tane)),
    PlayingCard(Played("Clive"), Card(Clover, Tanzaku)),
    PlayingCard(Discarded, Card(Wisteria, Kasu)),
    PlayingCard(Discarded, Card(Clover, Kasu)),
    PlayingCard(Played("Clive"), Card(Pine, Tanzaku)),
    PlayingCard(Played("Clive"), Card(Peony, Tanzaku)),
    PlayingCard(Discarded, Card(Chrysanthemum, Kasu)),
    PlayingCard(Discarded, Card(Plum, Kasu)),
    PlayingCard(Discarded, Card(Cherry, Kasu)),
    PlayingCard(Played("Clive"), Card(Grass, Tanzaku)),
    PlayingCard(Played("Clive"), Card(Plum, Tanzaku)),
    PlayingCard(Discarded, Card(Grass, Kasu)),
    PlayingCard(Discarded, Card(Peony, Kasu)),
    PlayingCard(Discarded, Card(Iris, Kasu)),
    PlayingCard(Discarded, Card(Maple, Kasu)),
    PlayingCard(Played("Clive"), Card(Wisteria, Tanzaku)),
    PlayingCard(Played("Clive"), Card(Chrysanthemum, Tanzaku)),
    PlayingCard(Played("Brekk"), Card(Chrysanthemum, Tane)),
    PlayingCard(Played("Brekk"), Card(Peony, Tane)),
    PlayingCard(Discarded, Card(Wisteria, Kasu)),
    PlayingCard(Discarded, Card(Iris, Kasu)),
    PlayingCard(Played("Brekk"), Card(Grass, Hikari)),
    PlayingCard(Discarded, Card(Clover, Kasu)),
  ]
  IO.cTrace("Cards in Play!", playedCards)
  pipe(
    List.nth(0),
    Maybe.fromMaybe(Player("Nobody", [])),
    (player) => bestMove(player, playedCards, state.visible, getHand(player)),
    IO.pTrace("what?"),
  )(state.players)
}
